[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "msiconvert"
version = "1.5.0"
description = "A library to convert MSI data into SpatialData"
authors = ["Theodoros Visvikis <t.visvikis@maastrichtuniversity.nl>"]
license = "MIT"
readme = "README.md"
packages = [{include = "msiconvert"}]

[tool.poetry.dependencies]
python = ">=3.12, <3.13"

dask = ">=2023.0.0"
geopandas = ">=0.9.0"
lxml = ">=4.6.0"
numpy = ">=1.20.0"
pandas = ">=1.3.0"
pyimzML = ">=1.4.0"
scipy = ">=1.7.0"
Shapely = ">=1.8.0"
spatialdata = ">=0.2.1" # Example: updated to a newer working version
tqdm = ">=4.50.0"
zarr = ">=2.10.0"
cryptography = "^45.0.5"
python-dotenv = "^1.1.1"

anndata = ">=0.9.0"

[tool.poetry.group.test.dependencies]
pytest = ">=7.0.0"
pytest-cov = ">=4.0.0"
mock = ">=4.0.0"

[tool.poetry.group.dev.dependencies]
black = ">=23.0.0"
isort = ">=5.12.0"
flake8 = ">=6.0.0"
python-semantic-release = "*"

[tool.poetry.scripts]
msiconvert = "msiconvert.__main__:main"
msiconvert-check-ontology = "msiconvert.tools.check_ontology:main"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
markers = [
    "unit: marks tests as unit tests (fast, no external dependencies)",
    "integration: marks tests as integration tests (may be slow, may require external dependencies)"
]
addopts = "-v --tb=short -m \"not integration\""
filterwarnings = [
    "ignore::DeprecationWarning:pkg_resources.*:",
    "ignore::DeprecationWarning:xarray_schema.*:",
    "ignore::UserWarning:spatialdata.models.models:1053"
]

# =============================================================
# === SEMANTIC RELEASE CONFIGURATION                         ===
# =============================================================
[tool.semantic_release]
version_toml = ["pyproject.toml:tool.poetry.version"]
version_variables = [
    "msiconvert/__init__.py:__version__",
]
build_command = "pip install build && python -m build"
upload_to_vcs_release = true

[tool.semantic_release.branches.main]
match = "main"
prerelease = false

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = [
    "chore*",
    "ci*",
]

[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[tool.semantic_release.remote_settings]
name = "origin"
token = { env = "GITHUB_TOKEN" }