name: Complexity Monitoring

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  complexity-check:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Install click for monitoring script
      run: poetry add --group dev click

    - name: Run complexity monitoring
      run: |
        poetry run python scripts/complexity_monitor.py \
          --threshold 10 \
          --save \
          --trends
      continue-on-error: true
      id: complexity-check

    - name: Upload complexity reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: complexity-reports
        path: reports/complexity/
        retention-days: 30

    - name: Comment on PR with complexity results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          // Find the latest complexity report
          const reportsDir = 'reports/complexity/';
          if (!fs.existsSync(reportsDir)) {
            console.log('No complexity reports found');
            return;
          }

          const files = fs.readdirSync(reportsDir)
            .filter(f => f.startsWith('complexity_report_'))
            .sort()
            .reverse();

          if (files.length === 0) {
            console.log('No complexity report files found');
            return;
          }

          const latestReport = JSON.parse(
            fs.readFileSync(path.join(reportsDir, files[0]), 'utf8')
          );

          let comment = '## üîç Complexity Monitoring Report\n\n';
          comment += `**Threshold:** ${latestReport.complexity_distribution ? '10' : 'N/A'}\n`;
          comment += `**Total Violations:** ${latestReport.total_violations}\n`;

          if (latestReport.total_violations > 0) {
            comment += `**Average Complexity:** ${latestReport.average_complexity}\n`;
            comment += `**Maximum Complexity:** ${latestReport.max_complexity}\n\n`;

            comment += '### üìä Complexity Distribution\n';
            for (const [category, count] of Object.entries(latestReport.complexity_distribution)) {
              comment += `- ${category}: ${count}\n`;
            }

            comment += '\n### üî• Top Complex Functions\n';
            const topFunctions = latestReport.high_complexity_functions.slice(0, 5);
            for (let i = 0; i < topFunctions.length; i++) {
              const func = topFunctions[i];
              comment += `${i + 1}. \`${func.file}:${func.line}\` - ${func.function} (${func.complexity})\n`;
            }

            comment += '\n> ‚ö†Ô∏è Consider refactoring functions with complexity > 15 for better maintainability.';
          } else {
            comment += '\n‚úÖ **Excellent!** No complexity violations found.';
          }

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Set complexity check status
      run: |
        if [ "${{ steps.complexity-check.outcome }}" = "failure" ]; then
          echo "‚ùå Complexity check failed - violations found"
          exit 1
        else
          echo "‚úÖ Complexity check passed"
        fi
