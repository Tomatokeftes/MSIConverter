import pytest
import sys
from unittest.mock import patch
import json

from msiconvert.tools.check_ontology import main

class TestCheckOntology:
    """Tests for the ontology checking tool."""

    @patch('msiconvert.tools.check_ontology.ONTOLOGY', autospec=True)
    @patch('msiconvert.metadata.validator.ImzMLOntologyValidator', autospec=True)
    @patch('sys.argv')
    def test_main_file_check(self, mock_argv, mock_validator_class, mock_ontology, capsys, tmp_path):
        """Verify the CLI output for a single file check with no unknown terms."""
        # Setup mocks
        mock_validator_instance = mock_validator_class.return_value
        # The 'summary' is overwritten by main() when not in verbose mode.
        mock_validator_instance.validate_file.return_value = {
            'unknown_terms': []
        }
        mock_ontology.report_unknown_terms.return_value = "Global unknown terms: None"

        # Create a dummy imzML file
        dummy_imzml = tmp_path / "test.imzML"
        dummy_imzml.write_text("""<mzML><cvList><cv id="MS" fullName="MS" version="1.0" uri="http://example.com/ms.obo"/></cvList><run><spectrumList count="0"/></run></mzML>""")

        # Set up command line arguments
        original_argv = sys.argv.copy()
        try:
            sys.argv = ["check_ontology", str(dummy_imzml)]

            # Run main
            main()

            # Assertions
            mock_validator_class.assert_called_once() # Ensure the validator class was instantiated
            mock_validator_instance.validate_file.assert_called_once_with(dummy_imzml)
            captured = capsys.readouterr()
            # The summary is generated by main(), not taken from the validator's return value.
            expected_output = "Ontology Validation Summary\n===========================\nTest summary for file\n\nNo unknown terms encountered.\n\nGlobal unknown terms: None\n"
            assert expected_output == captured.out
        finally:
            sys.argv = original_argv

    @patch('msiconvert.tools.check_ontology.ONTOLOGY', autospec=True)
    @patch('msiconvert.metadata.validator.ImzMLOntologyValidator', autospec=True)
    @patch('sys.argv')
    def test_main_directory_check(self, mock_argv, mock_validator_class, mock_ontology, capsys, tmp_path):
        """Verify the CLI output for a directory check."""
        # Setup mocks
        mock_validator_instance = mock_validator_class.return_value
        mock_validator_instance.validate_directory.return_value = {
            'files_checked': 2,
            'all_unknown_terms': ["term1", "term2"],
            'summary': 'Directory summary'
        }
        mock_ontology.report_unknown_terms.return_value = "Global unknown terms: Some"

        # Create a dummy directory and files
        dummy_dir = tmp_path / "test_dir"
        dummy_dir.mkdir()
        (dummy_dir / "file1.imzML").write_text("""<mzML><cvList><cv id="MS" fullName="MS" version="1.0" uri="http://example.com/ms.obo"/></cvList><run><spectrumList count="0"/></run></mzML>""")
        (dummy_dir / "file2.imzML").write_text("""<mzML><cvList><cv id="MS" fullName="MS" version="1.0" uri="http://example.com/ms.obo"/></cvList><run><spectrumList count="0"/></run></mzML>""")

        # Set up command line arguments
        original_argv = sys.argv.copy()
        try:
            sys.argv = ["check_ontology", str(dummy_dir)]

            # Run main
            main()

            # Assertions
            mock_validator_class.assert_called_once() # Ensure the validator class was instantiated
            mock_validator_instance.validate_directory.assert_called_once_with(dummy_dir)
            captured = capsys.readouterr()
            expected_output = (
                "
Checked 2 files
"
                "Found 2 unique unknown terms

"
                "Most common unknown terms:
"
                "  - term1
"
                "  - term2

"
                "Global unknown terms: Some
"
            )
            assert expected_output == captured.out
        finally:
            sys.argv = original_argv

    @patch('msiconvert.tools.check_ontology.ONTOLOGY', autospec=True)
    @patch('msiconvert.metadata.validator.ImzMLOntologyValidator', autospec=True)
    @patch('sys.argv')
    def test_main_output_to_json(self, mock_argv, mock_validator_class, mock_ontology, capsys, tmp_path):
        """Verify that results are correctly saved to a JSON file."""
        # Setup mocks
        mock_validator_instance = mock_validator_class.return_value
        validation_result = {
            'summary': 'Test summary for JSON',
            'unknown_terms': ["json_term"]
        }
        mock_validator_instance.validate_file.return_value = validation_result
        mock_ontology.report_unknown_terms.return_value = "Global unknown terms: JSON"

        output_json = tmp_path / "output.json"
        dummy_imzml = tmp_path / "test_json.imzML"
        dummy_imzml.write_text("""<mzML><cvList><cv id="MS" fullName="MS" version="1.0" uri="http://example.com/ms.obo"/></cvList><run><spectrumList count="0"/></run></mzML>""")

        # Set up command line arguments
        original_argv = sys.argv.copy()
        try:
            sys.argv = ["check_ontology", str(dummy_imzml), "--output", str(output_json)]

            # Run main
            main()

            # Assertions
            captured = capsys.readouterr()
            expected_output = f"Results saved to {output_json}

Global unknown terms: JSON
"
            assert expected_output == captured.out
            
            assert output_json.exists()
            with open(output_json, 'r') as f:
                content = json.load(f)
            assert content == validation_result
        finally:
            sys.argv = original_argv

    @patch('msiconvert.tools.check_ontology.ONTOLOGY', autospec=True)
    @patch('msiconvert.metadata.validator.ImzMLOntologyValidator', autospec=True)
    @patch('sys.argv')
    def test_main_verbose_output(self, mock_argv, mock_validator_class, mock_ontology, capsys, tmp_path):
        """Verify the verbose output includes the validator's summary."""
        # Setup mocks
        mock_validator_instance = mock_validator_class.return_value
        mock_validator_instance.validate_file.return_value = {
            'summary': 'Verbose summary',
            'unknown_terms': []
        }
        mock_ontology.report_unknown_terms.return_value = "Global unknown terms: Verbose"

        # Create a dummy imzML file
        dummy_imzml = tmp_path / "test_verbose.imzML"
        dummy_imzml.write_text("""<mzML><cvList><cv id="MS" fullName="MS" version="1.0" uri="http://example.com/ms.obo"/></cvList><run><spectrumList count="0"/></run></mzML>""")

        # Set up command line arguments
        original_argv = sys.argv.copy()
        try:
            sys.argv = ["check_ontology", str(dummy_imzml), "--verbose"]

            # Run main
            main()

            # Assertions
            captured = capsys.readouterr()
            # In verbose mode, the detailed summary is printed, followed by the "no terms" message.
            expected_output = (
                "Verbose summary

"
                "No unknown terms encountered.

"
                "Global unknown terms: Verbose
"
            )
            assert expected_output == captured.out
        finally:
            sys.argv = original_argv